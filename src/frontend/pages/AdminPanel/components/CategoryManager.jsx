import React, { useState, useEffect } from 'react';
import { v4 as uuid } from 'uuid';
import { toastHandler } from '../../../utils/utils';
import { ToastType } from '../../../constants/constants';
import { useAllProductsContext } from '../../../contexts/ProductsContextProvider';
import { useConfigContext } from '../../../contexts/ConfigContextProvider';
import styles from './CategoryManager.module.css';

const CategoryManager = () => {
  const { categories: categoriesFromContext, updateCategoriesFromAdmin } = useAllProductsContext();
  const { updateCategories } = useConfigContext();
  const [localCategories, setLocalCategories] = useState([]);
  const [editingCategory, setEditingCategory] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const initialCategoryState = {
    categoryName: '',
    categoryImage: '',
    description: ''
  };

  const [categoryForm, setCategoryForm] = useState(initialCategoryState);

  // CARGAR CATEGOR√çAS CON SINCRONIZACI√ìN MEJORADA
  useEffect(() => {
    console.log('üîÑ Cargando categor√≠as en CategoryManager:', categoriesFromContext?.length || 0);
    
    // Cargar desde el contexto primero
    if (categoriesFromContext && categoriesFromContext.length > 0) {
      setLocalCategories(categoriesFromContext);
    } else {
      // Si no hay categor√≠as en el contexto, intentar cargar desde localStorage
      const savedConfig = localStorage.getItem('adminStoreConfig');
      if (savedConfig) {
        try {
          const parsedConfig = JSON.parse(savedConfig);
          if (parsedConfig.categories && parsedConfig.categories.length > 0) {
            console.log('üì¶ Cargando categor√≠as desde localStorage:', parsedConfig.categories.length);
            setLocalCategories(parsedConfig.categories);
            // Sincronizar con el contexto
            updateCategoriesFromAdmin(parsedConfig.categories);
          }
        } catch (error) {
          console.error('Error al cargar categor√≠as desde localStorage:', error);
        }
      }
    }
  }, [categoriesFromContext, updateCategoriesFromAdmin]);

  // ESCUCHAR EVENTOS DE ACTUALIZACI√ìN DE CATEGOR√çAS
  useEffect(() => {
    const handleCategoriesUpdate = (event) => {
      const { categories: updatedCategories } = event.detail;
      console.log('üì° Evento de actualizaci√≥n de categor√≠as recibido en CategoryManager');
      setLocalCategories(updatedCategories);
    };

    const handleConfigUpdate = () => {
      console.log('üì° Evento de actualizaci√≥n de configuraci√≥n recibido en CategoryManager');
      const savedConfig = localStorage.getItem('adminStoreConfig');
      if (savedConfig) {
        try {
          const parsedConfig = JSON.parse(savedConfig);
          if (parsedConfig.categories) {
            setLocalCategories(parsedConfig.categories);
          }
        } catch (error) {
          console.error('Error al cargar categor√≠as desde configuraci√≥n:', error);
        }
      }
    };

    // Agregar listeners
    window.addEventListener('categoriesUpdated', handleCategoriesUpdate);
    window.addEventListener('categoriesConfigUpdated', handleCategoriesUpdate);
    window.addEventListener('forceStoreUpdate', handleConfigUpdate);
    window.addEventListener('adminConfigChanged', handleConfigUpdate);

    // Cleanup
    return () => {
      window.removeEventListener('categoriesUpdated', handleCategoriesUpdate);
      window.removeEventListener('categoriesConfigUpdated', handleCategoriesUpdate);
      window.removeEventListener('forceStoreUpdate', handleConfigUpdate);
      window.removeEventListener('adminConfigChanged', handleConfigUpdate);
    };
  }, []);

  // FUNCI√ìN PARA MANTENER EL TAMA√ëO ACTUAL DE LAS IM√ÅGENES (RESPONSIVO)
  const resizeImageToCurrentSize = (file, callback) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      // MANTENER EL TAMA√ëO ACTUAL DE LAS CATEGOR√çAS EXISTENTES
      // Analizando las im√°genes actuales, mantienen proporci√≥n 4:3 responsiva
      const targetWidth = 400;  // Tama√±o actual de las categor√≠as
      const targetHeight = 300; // Proporci√≥n 4:3 como las actuales
      
      canvas.width = targetWidth;
      canvas.height = targetHeight;
      
      // Calcular dimensiones manteniendo proporci√≥n
      const aspectRatio = img.width / img.height;
      let drawWidth = targetWidth;
      let drawHeight = targetHeight;
      let offsetX = 0;
      let offsetY = 0;
      
      if (aspectRatio > targetWidth/targetHeight) {
        drawHeight = targetWidth / aspectRatio;
        offsetY = (targetHeight - drawHeight) / 2;
      } else {
        drawWidth = targetHeight * aspectRatio;
        offsetX = (targetWidth - drawWidth) / 2;
      }
      
      // Fondo blanco para mejor contraste (como las actuales)
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, targetWidth, targetHeight);
      
      // Dibujar imagen centrada y redimensionada
      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      
      // Convertir a base64 con buena calidad (como las actuales)
      const resizedDataUrl = canvas.toDataURL('image/jpeg', 0.85);
      callback(resizedDataUrl);
    };
    
    img.onerror = () => {
      toastHandler(ToastType.Error, 'Error al procesar la imagen');
    };
    
    img.src = URL.createObjectURL(file);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCategoryForm(prev => ({
      ...prev,
      [name]: value
    }));
    setHasUnsavedChanges(true);
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validar que sea una imagen
      if (!file.type.startsWith('image/')) {
        toastHandler(ToastType.Error, 'Por favor selecciona un archivo de imagen v√°lido');
        return;
      }
      
      // Validar tama√±o (m√°ximo 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toastHandler(ToastType.Error, 'La imagen debe ser menor a 10MB');
        return;
      }
      
      // Redimensionar imagen manteniendo el tama√±o actual
      resizeImageToCurrentSize(file, (resizedDataUrl) => {
        setCategoryForm(prev => ({ ...prev, categoryImage: resizedDataUrl }));
        setHasUnsavedChanges(true);
        toastHandler(ToastType.Success, 'Imagen optimizada manteniendo el tama√±o actual de las categor√≠as');
      });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validaciones
    if (!categoryForm.categoryName.trim()) {
      toastHandler(ToastType.Error, 'El nombre de la categor√≠a es requerido');
      return;
    }
    
    if (!categoryForm.categoryImage.trim()) {
      toastHandler(ToastType.Error, 'La imagen de la categor√≠a es requerida');
      return;
    }

    // Verificar nombre duplicado
    const isDuplicate = localCategories.some(category => 
      category.categoryName.toLowerCase() === categoryForm.categoryName.toLowerCase() && 
      category._id !== editingCategory?._id
    );

    if (isDuplicate) {
      toastHandler(ToastType.Error, 'Ya existe una categor√≠a con este nombre');
      return;
    }

    // Crear categor√≠a con estructura exacta de categories.js
    const newCategory = {
      "_id": editingCategory ? editingCategory._id : uuid(),
      "categoryName": categoryForm.categoryName.toLowerCase().trim(),
      "categoryImage": categoryForm.categoryImage,
      "description": categoryForm.description || "",
      "id": editingCategory ? editingCategory.id : (localCategories.length + 1).toString(),
      "disabled": editingCategory ? editingCategory.disabled : false // Mantener estado o false por defecto
    };

    let updatedCategories;
    if (editingCategory) {
      updatedCategories = localCategories.map(c => c._id === editingCategory._id ? newCategory : c);
      toastHandler(ToastType.Success, '‚úÖ Categor√≠a actualizada exitosamente');
    } else {
      updatedCategories = [...localCategories, newCategory];
      toastHandler(ToastType.Success, '‚úÖ Categor√≠a creada exitosamente');
    }

    // SINCRONIZACI√ìN COMPLETA Y INMEDIATA MEJORADA
    performCompleteSync(updatedCategories);
    
    resetForm();
  };

  // Funci√≥n para sincronizaci√≥n completa MEJORADA CON PERSISTENCIA GARANTIZADA
  const performCompleteSync = (updatedCategories) => {
    console.log('üîÑ Iniciando sincronizaci√≥n completa de categor√≠as...');
    
    // 1. Actualizar estado local inmediatamente
    setLocalCategories(updatedCategories);
    
    // 2. Actualizar en localStorage para persistencia inmediata con verificaci√≥n
    const savedConfig = localStorage.getItem('adminStoreConfig') || '{}';
    let config = {};
    
    try {
      config = JSON.parse(savedConfig);
    } catch (error) {
      console.error('Error al cargar configuraci√≥n:', error);
      config = {};
    }

    config.categories = updatedCategories;
    config.lastModified = new Date().toISOString();
    
    // Guardar con verificaci√≥n
    localStorage.setItem('adminStoreConfig', JSON.stringify(config));
    
    // Verificar que se guard√≥ correctamente
    const verifyConfig = localStorage.getItem('adminStoreConfig');
    if (verifyConfig) {
      try {
        const parsedVerify = JSON.parse(verifyConfig);
        if (parsedVerify.categories && parsedVerify.categories.length === updatedCategories.length) {
          console.log('‚úÖ Categor√≠as guardadas correctamente en localStorage');
        }
      } catch (error) {
        console.error('Error en verificaci√≥n de guardado:', error);
      }
    }
    
    // 3. Actualizar en el contexto de configuraci√≥n para backup
    updateCategories(updatedCategories);
    
    // 4. Actualizar en el contexto de productos para sincronizaci√≥n inmediata en la tienda
    updateCategoriesFromAdmin(updatedCategories);
    
    // 5. Disparar m√∫ltiples eventos para garantizar sincronizaci√≥n completa
    setTimeout(() => {
      window.dispatchEvent(new CustomEvent('categoriesUpdated', { 
        detail: { categories: updatedCategories } 
      }));
      
      window.dispatchEvent(new CustomEvent('forceStoreUpdate'));
      
      // NUEVO: Evento espec√≠fico para cambios de configuraci√≥n del admin
      window.dispatchEvent(new CustomEvent('adminConfigChanged', { 
        detail: { categories: updatedCategories, type: 'categories' } 
      }));
      
      // Forzar re-renderizado adicional
      window.dispatchEvent(new CustomEvent('categoriesConfigUpdated', { 
        detail: { categories: updatedCategories } 
      }));
    }, 50);

    // 6. Verificaci√≥n adicional para asegurar sincronizaci√≥n
    setTimeout(() => {
      const currentConfig = localStorage.getItem('adminStoreConfig');
      if (currentConfig) {
        try {
          const parsedConfig = JSON.parse(currentConfig);
          if (parsedConfig.categories && parsedConfig.categories.length === updatedCategories.length) {
            console.log('‚úÖ Sincronizaci√≥n de categor√≠as verificada exitosamente');
            toastHandler(ToastType.Info, 'üîÑ Categor√≠as sincronizadas en tiempo real');
          }
        } catch (error) {
          console.error('Error en verificaci√≥n de sincronizaci√≥n:', error);
        }
      }
    }, 200);

    console.log('‚úÖ Sincronizaci√≥n de categor√≠as completada');
  };

  const resetForm = () => {
    setCategoryForm(initialCategoryState);
    setEditingCategory(null);
    setShowForm(false);
    setHasUnsavedChanges(false);
  };

  const editCategory = (category) => {
    setCategoryForm({
      categoryName: category.categoryName,
      categoryImage: category.categoryImage,
      description: category.description || ''
    });
    setEditingCategory(category);
    setShowForm(true);
    setHasUnsavedChanges(false);
  };

  const toggleCategoryStatus = (categoryId) => {
    const updatedCategories = localCategories.map(c => 
      c._id === categoryId 
        ? { ...c, disabled: !c.disabled }
        : c
    );

    // SINCRONIZACI√ìN COMPLETA
    performCompleteSync(updatedCategories);
    
    const category = localCategories.find(c => c._id === categoryId);
    toastHandler(ToastType.Success, 
      `‚úÖ Categor√≠a ${category.disabled ? 'habilitada' : 'deshabilitada'} exitosamente`
    );
  };

  const deleteCategory = (categoryId) => {
    if (!window.confirm('¬øEst√°s seguro de eliminar esta categor√≠a? Esta acci√≥n afectar√° todos los productos de esta categor√≠a.')) {
      return;
    }

    const updatedCategories = localCategories.filter(c => c._id !== categoryId);
    
    // SINCRONIZACI√ìN COMPLETA
    performCompleteSync(updatedCategories);
    
    toastHandler(ToastType.Success, '‚úÖ Categor√≠a eliminada exitosamente');
  };

  const handleCancel = () => {
    if (hasUnsavedChanges) {
      if (!window.confirm('¬øEst√°s seguro de cancelar? Se perder√°n los cambios no guardados.')) {
        return;
      }
    }
    resetForm();
  };

  // Verificar si hay cambios pendientes
  const hasChanges = localCategories.length !== categoriesFromContext.length || 
    JSON.stringify(localCategories) !== JSON.stringify(categoriesFromContext);

  return (
    <div className={styles.categoryManager}>
      <div className={styles.header}>
        <h2>üìÇ Gesti√≥n de Categor√≠as</h2>
        <div className={styles.headerActions}>
          {hasChanges && (
            <span className={styles.changesIndicator}>
              üü¢ Cambios aplicados en tiempo real
            </span>
          )}
          <button 
            className="btn btn-primary"
            onClick={() => setShowForm(!showForm)}
          >
            {showForm ? 'Cancelar' : '+ Nueva Categor√≠a'}
          </button>
        </div>
      </div>

      <div className={styles.infoBox}>
        <h4>‚ÑπÔ∏è Informaci√≥n Importante</h4>
        <p>Los cambios se aplican autom√°ticamente en la tienda. Las im√°genes mantienen el tama√±o actual de las categor√≠as existentes (400x300px responsivo). Las categor√≠as deshabilitadas no aparecen en el inicio de la tienda. Para exportar los cambios permanentemente, ve a la secci√≥n "üóÇÔ∏è Sistema Backup".</p>
      </div>

      {/* INDICADOR DE ESTADO DE CATEGOR√çAS */}
      <div className={styles.statusIndicator}>
        <h4>üìä Estado Actual de Categor√≠as</h4>
        <div className={styles.statusGrid}>
          <div className={styles.statusItem}>
            <span className={styles.statusNumber}>{localCategories.length}</span>
            <span className={styles.statusLabel}>Total</span>
          </div>
          <div className={styles.statusItem}>
            <span className={styles.statusNumber}>{localCategories.filter(c => !c.disabled).length}</span>
            <span className={styles.statusLabel}>Activas</span>
          </div>
          <div className={styles.statusItem}>
            <span className={styles.statusNumber}>{localCategories.filter(c => c.disabled).length}</span>
            <span className={styles.statusLabel}>Deshabilitadas</span>
          </div>
        </div>
      </div>

      {showForm && (
        <form className={styles.categoryForm} onSubmit={handleSubmit}>
          <div className={styles.formHeader}>
            <h3>{editingCategory ? 'Editar Categor√≠a' : 'Nueva Categor√≠a'}</h3>
            {hasUnsavedChanges && (
              <span className={styles.unsavedIndicator}>
                üî¥ Cambios sin guardar
              </span>
            )}
          </div>

          <div className={styles.formGrid}>
            <div className={styles.formGroup}>
              <label>Nombre de la Categor√≠a *</label>
              <input
                type="text"
                name="categoryName"
                value={categoryForm.categoryName}
                onChange={handleInputChange}
                className="form-input"
                placeholder="Ej: smartphones"
                required
              />
            </div>

            <div className={styles.formGroup}>
              <label>Descripci√≥n</label>
              <textarea
                name="description"
                value={categoryForm.description}
                onChange={handleInputChange}
                className="form-textarea"
                placeholder="Descripci√≥n de la categor√≠a"
                rows="3"
              />
            </div>
          </div>

          <div className={styles.formGroup}>
            <label>Imagen de la Categor√≠a * (Mantiene el tama√±o actual: 400x300px responsivo)</label>
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              className="form-input"
            />
            <small>O ingresa una URL de imagen:</small>
            <input
              type="url"
              name="categoryImage"
              value={categoryForm.categoryImage}
              onChange={handleInputChange}
              className="form-input"
              placeholder="https://ejemplo.com/imagen.jpg"
              required
            />
            {categoryForm.categoryImage && (
              <div className={styles.imagePreview}>
                <img src={categoryForm.categoryImage} alt="Preview" />
                <small>Tama√±o: 400x300px (igual que las categor√≠as actuales)</small>
              </div>
            )}
          </div>

          <div className={styles.formActions}>
            <button type="submit" className="btn btn-primary">
              üíæ {editingCategory ? 'Actualizar' : 'Crear'} Categor√≠a
            </button>
            <button type="button" onClick={handleCancel} className="btn btn-hipster">
              Cancelar
            </button>
          </div>
        </form>
      )}

      <div className={styles.categoriesList}>
        <div className={styles.listHeader}>
          <h3>Categor√≠as Existentes ({localCategories.length})</h3>
          {hasChanges && (
            <div className={styles.changesAlert}>
              <span>üü¢ Los cambios se han aplicado en tiempo real en la tienda</span>
              <small>Ve a "üóÇÔ∏è Sistema Backup" para exportar los cambios</small>
            </div>
          )}
        </div>

        {localCategories.length === 0 ? (
          <div className={styles.emptyState}>
            <h3>üìÇ No hay categor√≠as creadas</h3>
            <p>Crea tu primera categor√≠a para organizar los productos de la tienda.</p>
            <button 
              className="btn btn-primary"
              onClick={() => setShowForm(true)}
            >
              ‚ûï Crear Primera Categor√≠a
            </button>
          </div>
        ) : (
          <div className={styles.categoriesGrid}>
            {localCategories.map(category => (
              <div key={category._id} className={`${styles.categoryCard} ${category.disabled ? styles.disabled : ''}`}>
                <div className={styles.categoryImage}>
                  <img src={category.categoryImage} alt={category.categoryName} />
                  {category.disabled && (
                    <div className={styles.disabledOverlay}>
                      <span>DESHABILITADA</span>
                    </div>
                  )}
                </div>
                <div className={styles.categoryInfo}>
                  <h4>{category.categoryName}</h4>
                  {category.description && (
                    <p>{category.description}</p>
                  )}
                  <span className={`${styles.status} ${category.disabled ? styles.statusDisabled : styles.statusActive}`}>
                    {category.disabled ? 'Deshabilitada (No aparece en tienda)' : 'Activa (Visible en tienda)'}
                  </span>
                </div>
                <div className={styles.categoryActions}>
                  <button
                    onClick={() => editCategory(category)}
                    className="btn btn-primary"
                  >
                    Editar
                  </button>
                  <button
                    onClick={() => toggleCategoryStatus(category._id)}
                    className={`btn ${category.disabled ? 'btn-success' : 'btn-hipster'}`}
                  >
                    {category.disabled ? 'Habilitar' : 'Deshabilitar'}
                  </button>
                  <button
                    onClick={() => deleteCategory(category._id)}
                    className="btn btn-danger"
                  >
                    Eliminar
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CategoryManager;